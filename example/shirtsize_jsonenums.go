// generated by jsonenums -type=ShirtSize -type-prefix Size -lowercase; DO NOT EDIT
// TypePrefix: Size
// ToLowerCase: true

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_ShirtSizeNameToValue = map[string]ShirtSize{

		"na": SizeNA,
		"xs": SizeXS,
		"s":  SizeS,
		"m":  SizeM,
		"l":  SizeL,
		"xl": SizeXL,
	}

	_ShirtSizeValueToName = map[ShirtSize]string{

		SizeNA: "na",
		SizeXS: "xs",
		SizeS:  "s",
		SizeM:  "m",
		SizeL:  "l",
		SizeXL: "xl",
	}
)

func init() {
	var v ShirtSize
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ShirtSizeNameToValue = map[string]ShirtSize{
			interface{}(SizeNA).(fmt.Stringer).String(): SizeNA,
			interface{}(SizeXS).(fmt.Stringer).String(): SizeXS,
			interface{}(SizeS).(fmt.Stringer).String():  SizeS,
			interface{}(SizeM).(fmt.Stringer).String():  SizeM,
			interface{}(SizeL).(fmt.Stringer).String():  SizeL,
			interface{}(SizeXL).(fmt.Stringer).String(): SizeXL,
		}
	}
}

// MarshalJSON is generated so ShirtSize satisfies json.Marshaler.
func (r ShirtSize) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ShirtSizeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ShirtSize: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ShirtSize satisfies json.Unmarshaler.
func (r *ShirtSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShirtSize should be a string, got %s", data)
	}
	v, ok := _ShirtSizeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ShirtSize %q", s)
	}
	*r = v
	return nil
}
